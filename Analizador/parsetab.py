
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftIGUALQUENOIGUALQUEMENORQUEMENORIQUEMAYORQUEMAYORIQUEleftMASMENOSleftDIVIDIDOPORMODULOleftASrightUMENOSNOTnonassocPTOABS AND AS BARRAS BOOL BREAK CADENA CAPACITY CARACTER CHAR CLONE COMA CONTAINS CONTINUE CORDER CORIZQ DDOSPT DECIMAL DIVIDIDO DOSPT ELSE ENTERO F64 FALSE FN FOR GUIONB I64 ID IF IGUAL IGUALQUE IN INSERT LEN LET LLAVEDER LLAVEIZQ LOOP MAIN MAS MATCH MAYORIQUE MAYORQUE MENORIQUE MENORQUE MENOS MODULO MUT NEW NOIGUALQUE NOT OR PARDER PARIZQ POR POW POWF PRINTLN PTCOMA PTO PUSH REMOVE RETURN SIGNOI SQRT STR STRING TOOWNED TOSTRING TRUE USIZE VEC VVEC WHILE WITH_CAPACITYinicio : instruccionesinstrucciones : instrucciones instruccioninstrucciones : instruccioninstruccion : imprimir\n                          | declaracionimprimir : PRINTLN NOT PARIZQ expresiones PARDER PTCOMAdeclaracion : LET MUT ID DOSPT tipo IGUAL expresion PTCOMAdeclaracion : LET MUT ID IGUAL expresion PTCOMAdeclaracion : LET ID DOSPT tipo IGUAL expresion PTCOMAdeclaracion : LET ID IGUAL expresion PTCOMAtipo : I64\n            | F64\n            | BOOL\n            | CHAR\n            | STRING\n            | USIZE\n     expresiones : expresiones COMA expresionexpresiones : expresionexpresion : ENTEROexpresion : DECIMALexpresion : TRUEexpresion : FALSEexpresion : tostring\n                | toownedtostring : expresion PTO TOSTRING PARIZQ PARDER toowned : expresion PTO TOOWNED PARIZQ PARDER expresion : CADENAexpresion : CARACTERexpresion : expresion MAS expresion\n                    | expresion MENOS expresion\n                    | expresion POR expresion\n                    | expresion DIVIDIDO expresion\n                    | expresion MODULO expresionexpresion : MENOS expresion %prec UMENOS\n                | NOT expresionexpresion : I64 DDOSPT POW PARIZQ expresion COMA expresion PARDER\n                | F64 DDOSPT POWF PARIZQ expresion COMA expresion PARDERexpresion : expresion IGUALQUE expresion\n            | expresion NOIGUALQUE expresion\n            | expresion MENORQUE expresion\n            | expresion MAYORQUE expresion\n            | expresion MENORIQUE expresion\n            | expresion MAYORIQUE expresion expresion : PARIZQ expresion PARDERexpresion : PARIZQ expresion AS tipo PARDERexpresion : nativas_fun nativas_fun : expresion PTO ABS PARIZQ PARDER\n                    | expresion PTO SQRT PARIZQ PARDERnativas_fun : expresion PTO CLONE PARIZQ PARDER'
    
_lr_action_items = {'PRINTLN':([0,2,3,4,5,8,64,67,88,99,108,],[6,6,-3,-4,-5,-2,-10,-6,-8,-9,-7,]),'LET':([0,2,3,4,5,8,64,67,88,99,108,],[7,7,-3,-4,-5,-2,-10,-6,-8,-9,-7,]),'$end':([1,2,3,4,5,8,64,67,88,99,108,],[0,-1,-3,-4,-5,-2,-10,-6,-8,-9,-7,]),'NOT':([6,12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[9,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'MUT':([7,],[10,]),'ID':([7,10,],[11,13,]),'PARIZQ':([9,12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,80,81,82,83,84,85,86,87,96,97,109,110,],[12,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,91,92,93,94,95,96,97,17,17,17,17,17,]),'DOSPT':([11,13,],[14,32,]),'IGUAL':([11,13,34,35,36,37,38,39,40,61,],[15,33,63,-11,-12,-13,-14,-15,-16,87,]),'ENTERO':([12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'DECIMAL':([12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'TRUE':([12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'FALSE':([12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'CADENA':([12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'CARACTER':([12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MENOS':([12,15,16,17,19,20,21,22,23,24,25,26,27,28,31,33,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,65,68,69,70,71,72,73,74,75,76,77,78,79,87,89,96,97,98,100,101,102,103,104,105,106,107,109,110,111,112,113,114,],[28,28,28,28,47,-19,-20,-21,-22,-23,-24,-27,-28,28,-46,28,47,-35,47,28,28,28,28,28,28,28,28,28,28,28,28,-34,47,28,-44,47,-29,-30,-31,-32,-33,47,47,47,47,47,47,28,47,28,28,47,-45,-25,-26,-47,-48,-49,47,47,28,28,47,47,-36,-37,]),'I64':([12,14,15,16,17,28,32,33,45,46,47,48,49,50,51,52,53,54,55,56,63,66,87,96,97,109,110,],[29,35,29,29,29,29,35,29,29,29,29,29,29,29,29,29,29,29,29,29,29,35,29,29,29,29,29,]),'F64':([12,14,15,16,17,28,32,33,45,46,47,48,49,50,51,52,53,54,55,56,63,66,87,96,97,109,110,],[30,36,30,30,30,30,36,30,30,30,30,30,30,30,30,30,30,30,30,30,30,36,30,30,30,30,30,]),'BOOL':([14,32,66,],[37,37,37,]),'CHAR':([14,32,66,],[38,38,38,]),'STRING':([14,32,66,],[39,39,39,]),'USIZE':([14,32,66,],[40,40,40,]),'PARDER':([18,19,20,21,22,23,24,25,26,27,31,35,36,37,38,39,40,42,43,58,65,68,69,70,71,72,73,74,75,76,77,78,79,90,91,92,93,94,95,100,101,102,103,104,105,111,112,113,114,],[44,-18,-19,-20,-21,-22,-23,-24,-27,-28,-46,-11,-12,-13,-14,-15,-16,-35,65,-34,-44,-17,-29,-30,-31,-32,-33,-38,-39,-40,-41,-42,-43,100,101,102,103,104,105,-45,-25,-26,-47,-48,-49,113,114,-36,-37,]),'COMA':([18,19,20,21,22,23,24,25,26,27,31,42,58,65,68,69,70,71,72,73,74,75,76,77,78,79,100,101,102,103,104,105,106,107,113,114,],[45,-18,-19,-20,-21,-22,-23,-24,-27,-28,-46,-35,-34,-44,-17,-29,-30,-31,-32,-33,-38,-39,-40,-41,-42,-43,-45,-25,-26,-47,-48,-49,109,110,-36,-37,]),'MAS':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[46,-19,-20,-21,-22,-23,-24,-27,-28,-46,46,-35,46,-34,46,-44,46,-29,-30,-31,-32,-33,46,46,46,46,46,46,46,46,-45,-25,-26,-47,-48,-49,46,46,46,46,-36,-37,]),'POR':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[48,-19,-20,-21,-22,-23,-24,-27,-28,-46,48,-35,48,-34,48,-44,48,48,48,-31,-32,-33,48,48,48,48,48,48,48,48,-45,-25,-26,-47,-48,-49,48,48,48,48,-36,-37,]),'DIVIDIDO':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[49,-19,-20,-21,-22,-23,-24,-27,-28,-46,49,-35,49,-34,49,-44,49,49,49,-31,-32,-33,49,49,49,49,49,49,49,49,-45,-25,-26,-47,-48,-49,49,49,49,49,-36,-37,]),'MODULO':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[50,-19,-20,-21,-22,-23,-24,-27,-28,-46,50,-35,50,-34,50,-44,50,50,50,-31,-32,-33,50,50,50,50,50,50,50,50,-45,-25,-26,-47,-48,-49,50,50,50,50,-36,-37,]),'IGUALQUE':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[51,-19,-20,-21,-22,-23,-24,-27,-28,-46,51,-35,51,-34,51,-44,51,-29,-30,-31,-32,-33,-38,-39,-40,-41,-42,-43,51,51,-45,-25,-26,-47,-48,-49,51,51,51,51,-36,-37,]),'NOIGUALQUE':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[52,-19,-20,-21,-22,-23,-24,-27,-28,-46,52,-35,52,-34,52,-44,52,-29,-30,-31,-32,-33,-38,-39,-40,-41,-42,-43,52,52,-45,-25,-26,-47,-48,-49,52,52,52,52,-36,-37,]),'MENORQUE':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[53,-19,-20,-21,-22,-23,-24,-27,-28,-46,53,-35,53,-34,53,-44,53,-29,-30,-31,-32,-33,-38,-39,-40,-41,-42,-43,53,53,-45,-25,-26,-47,-48,-49,53,53,53,53,-36,-37,]),'MAYORQUE':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[54,-19,-20,-21,-22,-23,-24,-27,-28,-46,54,-35,54,-34,54,-44,54,-29,-30,-31,-32,-33,-38,-39,-40,-41,-42,-43,54,54,-45,-25,-26,-47,-48,-49,54,54,54,54,-36,-37,]),'MENORIQUE':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[55,-19,-20,-21,-22,-23,-24,-27,-28,-46,55,-35,55,-34,55,-44,55,-29,-30,-31,-32,-33,-38,-39,-40,-41,-42,-43,55,55,-45,-25,-26,-47,-48,-49,55,55,55,55,-36,-37,]),'MAYORIQUE':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[56,-19,-20,-21,-22,-23,-24,-27,-28,-46,56,-35,56,-34,56,-44,56,-29,-30,-31,-32,-33,-38,-39,-40,-41,-42,-43,56,56,-45,-25,-26,-47,-48,-49,56,56,56,56,-36,-37,]),'PTO':([19,20,21,22,23,24,25,26,27,31,41,42,43,58,62,65,68,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,106,107,111,112,113,114,],[57,-19,-20,-21,-22,-23,-24,-27,-28,-46,57,57,57,57,57,-44,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-45,-25,-26,-47,-48,-49,57,57,57,57,-36,-37,]),'PTCOMA':([20,21,22,23,24,25,26,27,31,41,42,44,58,62,65,69,70,71,72,73,74,75,76,77,78,79,89,98,100,101,102,103,104,105,113,114,],[-19,-20,-21,-22,-23,-24,-27,-28,-46,64,-35,67,-34,88,-44,-29,-30,-31,-32,-33,-38,-39,-40,-41,-42,-43,99,108,-45,-25,-26,-47,-48,-49,-36,-37,]),'AS':([20,21,22,23,24,25,26,27,31,42,43,58,65,69,70,71,72,73,74,75,76,77,78,79,100,101,102,103,104,105,113,114,],[-19,-20,-21,-22,-23,-24,-27,-28,-46,-35,66,-34,-44,-29,-30,-31,-32,-33,-38,-39,-40,-41,-42,-43,-45,-25,-26,-47,-48,-49,-36,-37,]),'DDOSPT':([29,30,],[59,60,]),'TOSTRING':([57,],[80,]),'TOOWNED':([57,],[81,]),'ABS':([57,],[82,]),'SQRT':([57,],[83,]),'CLONE':([57,],[84,]),'POW':([59,],[85,]),'POWF':([60,],[86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'inicio':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,8,]),'imprimir':([0,2,],[4,4,]),'declaracion':([0,2,],[5,5,]),'expresiones':([12,],[18,]),'expresion':([12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[19,41,42,43,58,62,68,69,70,71,72,73,74,75,76,77,78,79,89,98,106,107,111,112,]),'tostring':([12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'toowned':([12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'nativas_fun':([12,15,16,17,28,33,45,46,47,48,49,50,51,52,53,54,55,56,63,87,96,97,109,110,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'tipo':([14,32,66,],[34,61,90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> inicio","S'",1,None,None,None),
  ('inicio -> instrucciones','inicio',1,'p_inicio','Sintactico.py',119),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones1','Sintactico.py',132),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones2','Sintactico.py',138),
  ('instruccion -> imprimir','instruccion',1,'p_instrucion','Sintactico.py',145),
  ('instruccion -> declaracion','instruccion',1,'p_instrucion','Sintactico.py',146),
  ('imprimir -> PRINTLN NOT PARIZQ expresiones PARDER PTCOMA','imprimir',6,'p_imprimir2','Sintactico.py',365),
  ('declaracion -> LET MUT ID DOSPT tipo IGUAL expresion PTCOMA','declaracion',8,'p_declaracion1','Sintactico.py',374),
  ('declaracion -> LET MUT ID IGUAL expresion PTCOMA','declaracion',6,'p_declaracion2','Sintactico.py',379),
  ('declaracion -> LET ID DOSPT tipo IGUAL expresion PTCOMA','declaracion',7,'p_declaracion3','Sintactico.py',384),
  ('declaracion -> LET ID IGUAL expresion PTCOMA','declaracion',5,'p_declaracion4','Sintactico.py',389),
  ('tipo -> I64','tipo',1,'p_tipo1','Sintactico.py',574),
  ('tipo -> F64','tipo',1,'p_tipo1','Sintactico.py',575),
  ('tipo -> BOOL','tipo',1,'p_tipo1','Sintactico.py',576),
  ('tipo -> CHAR','tipo',1,'p_tipo1','Sintactico.py',577),
  ('tipo -> STRING','tipo',1,'p_tipo1','Sintactico.py',578),
  ('tipo -> USIZE','tipo',1,'p_tipo1','Sintactico.py',579),
  ('expresiones -> expresiones COMA expresion','expresiones',3,'p_expresiones1','Sintactico.py',605),
  ('expresiones -> expresion','expresiones',1,'p_expresiones2','Sintactico.py',613),
  ('expresion -> ENTERO','expresion',1,'p_expresion_entero','Sintactico.py',625),
  ('expresion -> DECIMAL','expresion',1,'p_expresion_decimal','Sintactico.py',632),
  ('expresion -> TRUE','expresion',1,'p_expresion_true','Sintactico.py',639),
  ('expresion -> FALSE','expresion',1,'p_expresion_false','Sintactico.py',644),
  ('expresion -> tostring','expresion',1,'p_expresion_to','Sintactico.py',651),
  ('expresion -> toowned','expresion',1,'p_expresion_to','Sintactico.py',652),
  ('tostring -> expresion PTO TOSTRING PARIZQ PARDER','tostring',5,'p_expresion_tostring','Sintactico.py',659),
  ('toowned -> expresion PTO TOOWNED PARIZQ PARDER','toowned',5,'p_expresion_toowned','Sintactico.py',664),
  ('expresion -> CADENA','expresion',1,'p_expresion_cadena1','Sintactico.py',673),
  ('expresion -> CARACTER','expresion',1,'p_expresion_caracter','Sintactico.py',680),
  ('expresion -> expresion MAS expresion','expresion',3,'p_expresion_aritmetica1','Sintactico.py',687),
  ('expresion -> expresion MENOS expresion','expresion',3,'p_expresion_aritmetica1','Sintactico.py',688),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_aritmetica1','Sintactico.py',689),
  ('expresion -> expresion DIVIDIDO expresion','expresion',3,'p_expresion_aritmetica1','Sintactico.py',690),
  ('expresion -> expresion MODULO expresion','expresion',3,'p_expresion_aritmetica1','Sintactico.py',691),
  ('expresion -> MENOS expresion','expresion',2,'p_exp_unaria','Sintactico.py',710),
  ('expresion -> NOT expresion','expresion',2,'p_exp_unaria','Sintactico.py',711),
  ('expresion -> I64 DDOSPT POW PARIZQ expresion COMA expresion PARDER','expresion',8,'p_expresion_aritmetica2','Sintactico.py',724),
  ('expresion -> F64 DDOSPT POWF PARIZQ expresion COMA expresion PARDER','expresion',8,'p_expresion_aritmetica2','Sintactico.py',725),
  ('expresion -> expresion IGUALQUE expresion','expresion',3,'p_expresion_relacional','Sintactico.py',739),
  ('expresion -> expresion NOIGUALQUE expresion','expresion',3,'p_expresion_relacional','Sintactico.py',740),
  ('expresion -> expresion MENORQUE expresion','expresion',3,'p_expresion_relacional','Sintactico.py',741),
  ('expresion -> expresion MAYORQUE expresion','expresion',3,'p_expresion_relacional','Sintactico.py',742),
  ('expresion -> expresion MENORIQUE expresion','expresion',3,'p_expresion_relacional','Sintactico.py',743),
  ('expresion -> expresion MAYORIQUE expresion','expresion',3,'p_expresion_relacional','Sintactico.py',744),
  ('expresion -> PARIZQ expresion PARDER','expresion',3,'p_exp_agrupa','Sintactico.py',762),
  ('expresion -> PARIZQ expresion AS tipo PARDER','expresion',5,'p_casteo','Sintactico.py',928),
  ('expresion -> nativas_fun','expresion',1,'p_funciones_nat_inicio','Sintactico.py',936),
  ('nativas_fun -> expresion PTO ABS PARIZQ PARDER','nativas_fun',5,'p_funciones_nat1','Sintactico.py',941),
  ('nativas_fun -> expresion PTO SQRT PARIZQ PARDER','nativas_fun',5,'p_funciones_nat1','Sintactico.py',942),
  ('nativas_fun -> expresion PTO CLONE PARIZQ PARDER','nativas_fun',5,'p_funciones_nat2','Sintactico.py',952),
]
